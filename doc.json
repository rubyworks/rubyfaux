{"(metadata)":{"authors":[{"name":"Thomas Sawyer"}],"copyrights":[],"replacements":[],"conflicts":[],"requirements":[],"dependencies":[],"repositories":[],"resources":{"home":"http://rubyworks.github.com/fish","work":"http://github.com/rubyworks/fish","blog":"http://rubyworks.github.com/","mail":"http://googlegroups.com/group/rubyworks-mailinglist"},"load_path":["lib"],"extra":{},"source":[],"alternatives":[],"revision":0,"name":"fish-sampler","title":"Fish Sampler","version":"1.0.0","description":"RDocodile is the RDoc Beautification project. Is houses a number of project\nrepositories","date":"2011-08-20","path":"(metadata)"},"FishSampler::DEFALULT_QUALITIES":{"!":"constant","path":"FishSampler::DEFALULT_QUALITIES","name":"DEFALULT_QUALITIES","namespace":"FishSampler","comment":"Every fish is scaly.","format":"rdoc","value":"[ :scaly ]","files":["/lib/fish.rb"]},"FishSampler":{"!":"module","path":"FishSampler","name":"FishSampler","namespace":"","includes":[],"extensions":[],"comment":"= Fish Sampler\n\nLet us review... Red fish, Blue fish, One fish, Two fish...","format":"rdoc","constants":["FishSampler::DEFALULT_QUALITIES"],"modules":["FishSampler::ManEater"],"classes":["FishSampler::Fish","FishSampler::RedFish","FishSampler::BlueFish","FishSampler::OldFish","FishSampler::NewFish","FishSampler::Shark"],"methods":[],"accessors":["FishSampler.fishy_active"],"files":["/lib/fish.rb"]},"FishSampler::BlueFish":{"!":"class","path":"FishSampler::BlueFish","name":"BlueFish","namespace":"FishSampler","includes":[],"extensions":[],"comment":"= Blue Fish\n\nDespite their name most Bluefish aren't very blue.","format":"rdoc","constants":[],"modules":[],"classes":[],"methods":["FishSampler::BlueFish#initialize_qualities"],"accessors":["FishSampler::BlueFish#qualities"],"files":["/lib/fish.rb"],"superclass":"FishSampler::Fish"},"FishSampler::Fish":{"!":"class","path":"FishSampler::Fish","name":"Fish","namespace":"FishSampler","includes":[],"extensions":[],"comment":"A fish is any aquatic vertebrate animal that is typically ectothermic (or cold-blooded),\ncovered with scales, and equipped with two sets of paired fins and several unpaired fins.\nFish are abundant in the sea and in fresh water, with species being known from mountain\nstreams (e.g., char and gudgeon) as well as in the deepest depths of the ocean\n(e.g., gulpers and anglerfish).","format":"rdoc","constants":[],"modules":[],"classes":[],"methods":["FishSampler::Fish.new","FishSampler::Fish#initialize_qualities"],"accessors":["FishSampler::Fish#qualities","FishSampler::Fish#properties"],"files":["/lib/fish.rb"],"superclass":"Object"},"FishSampler::ManEater":{"!":"module","path":"FishSampler::ManEater","name":"ManEater","namespace":"FishSampler","includes":[],"extensions":[],"comment":"Some fish will eat a man!","format":"rdoc","constants":[],"modules":[],"classes":[],"methods":["FishSampler::ManEater#initialize_qualities"],"accessors":[],"files":["/lib/fish.rb"]},"FishSampler::NewFish":{"!":"class","path":"FishSampler::NewFish","name":"NewFish","namespace":"FishSampler","includes":[],"extensions":[],"comment":"It's hard to tell new fish form small fish.","format":"rdoc","constants":[],"modules":[],"classes":[],"methods":["FishSampler::NewFish#initialize_qualities"],"accessors":["FishSampler::NewFish#qualities"],"files":["/lib/fish.rb"],"superclass":"FishSampler::Fish"},"FishSampler::OldFish":{"!":"class","path":"FishSampler::OldFish","name":"OldFish","namespace":"FishSampler","includes":[],"extensions":[],"comment":"Fish get old too.","format":"rdoc","constants":[],"modules":[],"classes":[],"methods":["FishSampler::OldFish#initialize_qualities"],"accessors":["FishSampler::OldFish#qualities"],"files":["/lib/fish.rb"],"superclass":"FishSampler::Fish"},"FishSampler::RedFish":{"!":"class","path":"FishSampler::RedFish","name":"RedFish","namespace":"FishSampler","includes":[],"extensions":[],"comment":"= Brite Red Fish\n\nRed fish are quite pretty a fairly common.","format":"rdoc","constants":[],"modules":[],"classes":[],"methods":["FishSampler::RedFish#initialize_qualities"],"accessors":["FishSampler::RedFish#qualities"],"files":["/lib/fish.rb"],"superclass":"Object"},"FishSampler::Shark":{"!":"class","path":"FishSampler::Shark","name":"Shark","namespace":"FishSampler","includes":["ManEater"],"extensions":[],"comment":"= Shark (Yikes!)\n\nSharks (superorder Selachimorpha) are a type of fish with a full cartilaginous skeleton\nand a highly streamlined body. The earliest known sharks date from more than 420 million\nyears ago, before the time of the dinosaurs.","format":"rdoc","constants":[],"modules":[],"classes":[],"methods":["FishSampler::Shark#initialize_qualities"],"accessors":[],"files":["/lib/fish.rb"],"superclass":"FishSampler::Fish"},"Numeric":{"!":"class","path":"Numeric","name":"Numeric","namespace":"","includes":["Multipliers"],"extensions":[],"comment":"","format":"rdoc","constants":[],"modules":["Numeric::Multipliers"],"classes":[],"methods":[],"accessors":[],"files":["/lib/multipliers.rb"],"superclass":"Object"},"Numeric::Multipliers":{"!":"module","path":"Numeric::Multipliers","name":"Multipliers","namespace":"Numeric","includes":[],"extensions":[],"comment":"= Multipliers\n\nAdds methods to Numeric to make working with\nmagnitudes (kilo, mega, giga, milli, micro, etc.)\n\n  1.kilo               #=> 1000\n  1.milli              #=> 0.001\n  1.kibi               #=> 1024\n\nTo display a value in a certain denomination, simply\nperform the inverse operation by placing the\nmultiplier called on unit (1) in the denominator.\n\n  1000 / 1.kilo        #=> 1\n  1024 / 1.kibi        #=> 1","format":"rdoc","constants":[],"modules":[],"classes":[],"methods":["Numeric::Multipliers#deka","Numeric::Multipliers#hecto","Numeric::Multipliers#kilo","Numeric::Multipliers#mega","Numeric::Multipliers#giga","Numeric::Multipliers#tera","Numeric::Multipliers#peta","Numeric::Multipliers#exa","Numeric::Multipliers#deci","Numeric::Multipliers#centi","Numeric::Multipliers#milli","Numeric::Multipliers#micro","Numeric::Multipliers#nano","Numeric::Multipliers#pico","Numeric::Multipliers#femto","Numeric::Multipliers#atto","Numeric::Multipliers#kibi","Numeric::Multipliers#mebi","Numeric::Multipliers#gibi","Numeric::Multipliers#tebi","Numeric::Multipliers#pebi","Numeric::Multipliers#exbi"],"accessors":[],"files":["/lib/multipliers.rb"]},"FishSampler::Fish.new":{"!":"method","declarations":["class","public"],"path":"FishSampler::Fish.new","name":"new","namespace":"FishSampler::Fish","comment":"New Fish","format":"rdoc","aliases":[],"alias_for":null,"singleton":true,"interfaces":[{"signature":"new()","arguments":[]}],"returns":[],"file":"/lib/fish.rb","line":26,"source":"# File lib/fish.rb, line 26\n    def initialize\n      @qualities = DEFALULT_QUALITIES\n      initialize_qualities\n    end","language":"ruby"},"Numeric::Multipliers#atto":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#atto","name":"atto","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"alias_for":null,"singleton":false,"interfaces":[{"signature":"atto()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":76,"source":"# File lib/multipliers.rb, line 76\n    def atto  ; self.to_f / 1000000000000000000 ; end","language":"ruby"},"Numeric::Multipliers#centi":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#centi","name":"centi","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"alias_for":null,"singleton":false,"interfaces":[{"signature":"centi()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":70,"source":"# File lib/multipliers.rb, line 70\n    def centi ; self.to_f / 100 ; end","language":"ruby"},"Numeric::Multipliers#deci":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#deci","name":"deci","namespace":"Numeric::Multipliers","comment":"SI Fractional","format":"rdoc","aliases":[],"alias_for":null,"singleton":false,"interfaces":[{"signature":"deci()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":69,"source":"# File lib/multipliers.rb, line 69\n    def deci  ; self.to_f / 10 ; end","language":"ruby"},"Numeric::Multipliers#deka":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#deka","name":"deka","namespace":"Numeric::Multipliers","comment":"SI Multipliers","format":"rdoc","aliases":[],"alias_for":null,"singleton":false,"interfaces":[{"signature":"deka()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":58,"source":"# File lib/multipliers.rb, line 58\n    def deka  ; self * 10 ; end","language":"ruby"},"Numeric::Multipliers#exa":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#exa","name":"exa","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"alias_for":null,"singleton":false,"interfaces":[{"signature":"exa()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":65,"source":"# File lib/multipliers.rb, line 65\n    def exa   ; self * 1000000000000000000 ; end","language":"ruby"},"Numeric::Multipliers#exbi":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#exbi","name":"exbi","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"alias_for":null,"singleton":false,"interfaces":[{"signature":"exbi()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":85,"source":"# File lib/multipliers.rb, line 85\n    def exbi ; self * 1024**6 ; end","language":"ruby"},"Numeric::Multipliers#femto":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#femto","name":"femto","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"alias_for":null,"singleton":false,"interfaces":[{"signature":"femto()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":75,"source":"# File lib/multipliers.rb, line 75\n    def femto ; self.to_f / 1000000000000000 ; end","language":"ruby"},"Numeric::Multipliers#gibi":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#gibi","name":"gibi","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"alias_for":null,"singleton":false,"interfaces":[{"signature":"gibi()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":82,"source":"# File lib/multipliers.rb, line 82\n    def gibi ; self * 1024**3 ; end","language":"ruby"},"Numeric::Multipliers#giga":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#giga","name":"giga","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"alias_for":null,"singleton":false,"interfaces":[{"signature":"giga()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":62,"source":"# File lib/multipliers.rb, line 62\n    def giga  ; self * 1000000000 ; end","language":"ruby"},"Numeric::Multipliers#hecto":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#hecto","name":"hecto","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"alias_for":null,"singleton":false,"interfaces":[{"signature":"hecto()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":59,"source":"# File lib/multipliers.rb, line 59\n    def hecto ; self * 100 ; end","language":"ruby"},"FishSampler::Shark#initialize_qualities":{"!":"method","declarations":["instance","public"],"path":"FishSampler::Shark#initialize_qualities","name":"initialize_qualities","namespace":"FishSampler::Shark","comment":"New Shark","format":"rdoc","aliases":[],"alias_for":null,"singleton":false,"interfaces":[{"signature":"initialize_qualities()","arguments":[]}],"returns":[],"file":"/lib/fish.rb","line":110,"source":"# File lib/fish.rb, line 110\n    def initialize_qualities\n      super\n      @qualties << :big\n    end","language":"ruby"},"FishSampler::Fish#initialize_qualities":{"!":"method","declarations":["instance","public"],"path":"FishSampler::Fish#initialize_qualities","name":"initialize_qualities","namespace":"FishSampler::Fish","comment":"Override to add qualties.","format":"rdoc","aliases":[],"alias_for":null,"singleton":false,"interfaces":[{"signature":"initialize_qualities()","arguments":[]}],"returns":[],"file":"/lib/fish.rb","line":32,"source":"# File lib/fish.rb, line 32\n    def initialize_qualities\n    end","language":"ruby"},"FishSampler::RedFish#initialize_qualities":{"!":"method","declarations":["instance","public"],"path":"FishSampler::RedFish#initialize_qualities","name":"initialize_qualities","namespace":"FishSampler::RedFish","comment":"New Red Fish","format":"rdoc","aliases":[],"alias_for":null,"singleton":false,"interfaces":[{"signature":"initialize_qualities()","arguments":[]}],"returns":[],"file":"/lib/fish.rb","line":47,"source":"# File lib/fish.rb, line 47\n    def initialize_qualities\n      super\n      @qualties << :red\n    end","language":"ruby"},"FishSampler::ManEater#initialize_qualities":{"!":"method","declarations":["instance","public"],"path":"FishSampler::ManEater#initialize_qualities","name":"initialize_qualities","namespace":"FishSampler::ManEater","comment":"Man Eaters are scary!","format":"rdoc","aliases":[],"alias_for":null,"singleton":false,"interfaces":[{"signature":"initialize_qualities()","arguments":[]}],"returns":[],"file":"/lib/fish.rb","line":94,"source":"# File lib/fish.rb, line 94\n    def initialize_qualities\n      super\n      @qualties << :scary\n    end","language":"ruby"},"FishSampler::OldFish#initialize_qualities":{"!":"method","declarations":["instance","public"],"path":"FishSampler::OldFish#initialize_qualities","name":"initialize_qualities","namespace":"FishSampler::OldFish","comment":"New Old Fish","format":"rdoc","aliases":[],"alias_for":null,"singleton":false,"interfaces":[{"signature":"initialize_qualities()","arguments":[]}],"returns":[],"file":"/lib/fish.rb","line":73,"source":"# File lib/fish.rb, line 73\n    def initialize_qualities\n      super\n      @qualties = << :old\n    end","language":"ruby"},"FishSampler::NewFish#initialize_qualities":{"!":"method","declarations":["instance","public"],"path":"FishSampler::NewFish#initialize_qualities","name":"initialize_qualities","namespace":"FishSampler::NewFish","comment":"New NewFish","format":"rdoc","aliases":[],"alias_for":null,"singleton":false,"interfaces":[{"signature":"initialize_qualities()","arguments":[]}],"returns":[],"file":"/lib/fish.rb","line":85,"source":"# File lib/fish.rb, line 85\n    def initialize_qualities\n      super\n      @qualties << :new\n    end","language":"ruby"},"FishSampler::BlueFish#initialize_qualities":{"!":"method","declarations":["instance","public"],"path":"FishSampler::BlueFish#initialize_qualities","name":"initialize_qualities","namespace":"FishSampler::BlueFish","comment":"New Blue Fish","format":"rdoc","aliases":[],"alias_for":null,"singleton":false,"interfaces":[{"signature":"initialize_qualities()","arguments":[]}],"returns":[],"file":"/lib/fish.rb","line":61,"source":"# File lib/fish.rb, line 61\n    def initialize_qualities\n      super\n      @qualties << :blue\n    end","language":"ruby"},"Numeric::Multipliers#kibi":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#kibi","name":"kibi","namespace":"Numeric::Multipliers","comment":"SI Binary","format":"rdoc","aliases":[],"alias_for":null,"singleton":false,"interfaces":[{"signature":"kibi()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":80,"source":"# File lib/multipliers.rb, line 80\n    def kibi ; self * 1024 ; end","language":"ruby"},"Numeric::Multipliers#kilo":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#kilo","name":"kilo","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"alias_for":null,"singleton":false,"interfaces":[{"signature":"kilo()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":60,"source":"# File lib/multipliers.rb, line 60\n    def kilo  ; self * 1000 ; end","language":"ruby"},"Numeric::Multipliers#mebi":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#mebi","name":"mebi","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"alias_for":null,"singleton":false,"interfaces":[{"signature":"mebi()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":81,"source":"# File lib/multipliers.rb, line 81\n    def mebi ; self * 1024**2 ; end","language":"ruby"},"Numeric::Multipliers#mega":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#mega","name":"mega","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"alias_for":null,"singleton":false,"interfaces":[{"signature":"mega()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":61,"source":"# File lib/multipliers.rb, line 61\n    def mega  ; self * 1000000 ; end","language":"ruby"},"Numeric::Multipliers#micro":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#micro","name":"micro","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"alias_for":null,"singleton":false,"interfaces":[{"signature":"micro()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":72,"source":"# File lib/multipliers.rb, line 72\n    def micro ; self.to_f / 1000000 ; end","language":"ruby"},"Numeric::Multipliers#milli":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#milli","name":"milli","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"alias_for":null,"singleton":false,"interfaces":[{"signature":"milli()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":71,"source":"# File lib/multipliers.rb, line 71\n    def milli ; self.to_f / 1000 ; end","language":"ruby"},"Numeric::Multipliers#nano":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#nano","name":"nano","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"alias_for":null,"singleton":false,"interfaces":[{"signature":"nano()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":73,"source":"# File lib/multipliers.rb, line 73\n    def nano  ; self.to_f / 1000000000 ; end","language":"ruby"},"Numeric::Multipliers#pebi":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#pebi","name":"pebi","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"alias_for":null,"singleton":false,"interfaces":[{"signature":"pebi()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":84,"source":"# File lib/multipliers.rb, line 84\n    def pebi ; self * 1024**5 ; end","language":"ruby"},"Numeric::Multipliers#peta":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#peta","name":"peta","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"alias_for":null,"singleton":false,"interfaces":[{"signature":"peta()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":64,"source":"# File lib/multipliers.rb, line 64\n    def peta  ; self * 1000000000000000 ; end","language":"ruby"},"Numeric::Multipliers#pico":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#pico","name":"pico","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"alias_for":null,"singleton":false,"interfaces":[{"signature":"pico()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":74,"source":"# File lib/multipliers.rb, line 74\n    def pico  ; self.to_f / 1000000000000 ; end","language":"ruby"},"Numeric::Multipliers#tebi":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#tebi","name":"tebi","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"alias_for":null,"singleton":false,"interfaces":[{"signature":"tebi()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":83,"source":"# File lib/multipliers.rb, line 83\n    def tebi ; self * 1024**4 ; end","language":"ruby"},"Numeric::Multipliers#tera":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#tera","name":"tera","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"alias_for":null,"singleton":false,"interfaces":[{"signature":"tera()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":63,"source":"# File lib/multipliers.rb, line 63\n    def tera  ; self * 1000000000000 ; end","language":"ruby"},"FishSampler.fishy_active":{"!":"method","declarations":["class","public"],"path":"FishSampler.fishy_active","name":"fishy_active","namespace":"FishSampler","comment":"Example of a class-level attribute.","format":"rdoc","aliases":[],"alias_for":null,"singleton":true,"interfaces":[{"signature":"fishy_active","arguments":[{"name":"fishy_active"}]}],"returns":[],"file":"/(unknown)","line":0,"source":"","language":"ruby"},"FishSampler::Fish#properties":{"!":"method","declarations":["instance","public"],"path":"FishSampler::Fish#properties","name":"properties","namespace":"FishSampler::Fish","comment":"List of various fish qualities.","format":"rdoc","aliases":[],"alias_for":"FishSampler::Fish#qualities","singleton":false,"interfaces":[{"signature":"properties","arguments":[{"name":"properties"}]}],"returns":[],"file":"/(unknown)","line":0,"source":"","language":"ruby"},"FishSampler::Fish#qualities":{"!":"method","declarations":["instance","public"],"path":"FishSampler::Fish#qualities","name":"qualities","namespace":"FishSampler::Fish","comment":"List of various fish qualities.","format":"rdoc","aliases":["FishSampler::Fish#properties"],"alias_for":null,"singleton":false,"interfaces":[{"signature":"qualities","arguments":[{"name":"qualities"}]}],"returns":[],"file":"/(unknown)","line":0,"source":"","language":"ruby"},"FishSampler::BlueFish#qualities":{"!":"method","declarations":["instance","public"],"path":"FishSampler::BlueFish#qualities","name":"qualities","namespace":"FishSampler::BlueFish","comment":"List of various fish qualities.","format":"rdoc","aliases":[],"alias_for":null,"singleton":false,"interfaces":[{"signature":"qualities","arguments":[{"name":"qualities"}]}],"returns":[],"file":"/(unknown)","line":0,"source":"","language":"ruby"},"FishSampler::NewFish#qualities":{"!":"method","declarations":["instance","public"],"path":"FishSampler::NewFish#qualities","name":"qualities","namespace":"FishSampler::NewFish","comment":"List of various fish qualities.","format":"rdoc","aliases":[],"alias_for":null,"singleton":false,"interfaces":[{"signature":"qualities","arguments":[{"name":"qualities"}]}],"returns":[],"file":"/(unknown)","line":0,"source":"","language":"ruby"},"FishSampler::OldFish#qualities":{"!":"method","declarations":["instance","public"],"path":"FishSampler::OldFish#qualities","name":"qualities","namespace":"FishSampler::OldFish","comment":"List of various fish qualities.","format":"rdoc","aliases":[],"alias_for":null,"singleton":false,"interfaces":[{"signature":"qualities","arguments":[{"name":"qualities"}]}],"returns":[],"file":"/(unknown)","line":0,"source":"","language":"ruby"},"FishSampler::RedFish#qualities":{"!":"method","declarations":["instance","public"],"path":"FishSampler::RedFish#qualities","name":"qualities","namespace":"FishSampler::RedFish","comment":"List of various fish qualities.","format":"rdoc","aliases":[],"alias_for":null,"singleton":false,"interfaces":[{"signature":"qualities","arguments":[{"name":"qualities"}]}],"returns":[],"file":"/(unknown)","line":0,"source":"","language":"ruby"},"/README":{"!":"document","path":"README","name":"README","mtime":"2011-09-30 11:22:07 -0400","text":"= RDocodile's Fish Sampler\n\nhttp://rdocodile.github.com\n\n\n== Description\n\nRDocodile's Fish Sampler is as a mock Ruby project used to demostrate\nRDocodile's many RDoc formats. RDocodile is the RDoc Beautification project.\nIt houses a number of format repositories and an reusable RDoc component\nsystem.\n\n\n== Features\n\n* Provides many practical, yet aesthetically pleasing templates.\n* Provides a component system to make RDOc formats easier to build and extended.\n\n\n== Lorem Ipsum\n\nDolor sit amet, consectetur adipiscing elit. Sed tristique metus id\nnisl suscipit et pulvinar lectus pulvinar. Mauris eu leo sit amet magna rutrum\npharetra. Aliquam eu est eu erat tempor dapibus et sit amet urna. Nunc vulputate\nurna ipsum. In venenatis gravida est, ullamcorper commodo lorem laoreet eget.\nAliquam non ipsum ante, a mollis quam. Cras in risus id dolor lacinia ornare.\n\nPellentesque habitant morbi tristique senectus et netus et malesuada fames ac\nturpis egestas. Etiam rutrum nulla a mauris condimentum non egestas felis\ntincidunt. Nulla mi nisi, ullamcorper placerat gravida non, aliquet vel felis.\nVivamus eu odio vel elit bibendum congue.\n\n\n== Installation\n\nInstalling via RubyGems is per the usual:\n\n  $ sudo gem install yummy-fish-sampler\n\n\n== Copyright\n\nRdocodile's Fish Sampler\n\nCopyright (c) 2009 Thomas Sawyer, CC-A License\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n","format":"text/plain"},"/lib/fish.rb":{"!":"script","path":"lib/fish.rb","name":"fish.rb","mtime":"2011-09-30 11:22:07 -0400","requires":[],"constants":[],"modules":[],"classes":[],"methods":[]},"/lib/multipliers.rb":{"!":"script","path":"lib/multipliers.rb","name":"multipliers.rb","mtime":"2011-09-30 11:22:07 -0400","requires":[],"constants":[],"modules":[],"classes":[],"methods":[]}}

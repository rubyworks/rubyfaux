{"(metadata)":{"source":["PROFILE"],"authors":[{"name":"Thomas Sawyer"}],"copyrights":[{"holder":"Rubyworks","year":"2011"}],"replacements":[],"alternatives":[],"requirements":[],"dependencies":[],"conflicts":[],"repositories":[],"resources":{"home":"http://rubyworks.github.com/fish","work":"http://github.com/rubyworks/fish","blog":"http://rubyworks.github.com/","mail":"http://googlegroups.com/group/rubyworks-mailinglist"},"extra":{},"load_path":["lib"],"revision":null,"name":"fish-sampler","title":"Fish Sampler","version":"1.0.0","description":"Fish Sampler is a sample project for demonstrating Ruby documentation.","scm_uri":"https://github.com/rubyworks/shomen/blob/master/work/sample","date":"2012-01-01","path":"(metadata)","markup":"rdoc"},"FishSampler":{"!":"module","path":"FishSampler","name":"FishSampler","namespace":"","comment":"= Fish Sampler\n\nLet us review... Red fish, Blue fish, One fish, Two fish...","format":"rdoc","constants":["FishSampler::DEFALULT_QUALITIES"],"includes":[],"extensions":[],"modules":["FishSampler::ManEater"],"classes":["FishSampler::Fish","FishSampler::RedFish","FishSampler::BlueFish","FishSampler::OldFish","FishSampler::NewFish","FishSampler::Shark"],"methods":["FishSampler.fishy_active"],"accessors":["FishSampler.fishy_active"],"files":["/lib/fish.rb"],"tags":{}},"FishSampler::DEFALULT_QUALITIES":{"!":"constant","path":"FishSampler::DEFALULT_QUALITIES","name":"DEFALULT_QUALITIES","namespace":"FishSampler","comment":"Every fish is scaly.","format":"rdoc","value":"[ :scaly ]","tags":{},"files":["/lib/fish.rb"]},"FishSampler.fishy_active":{"!":"method","declarations":["class","public"],"path":"FishSampler.fishy_active","name":"fishy_active","namespace":"FishSampler","comment":"Example of a class-level attribute.","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"fishy_active","arguments":[]}],"returns":[],"file":"/lib/fish.rb","line":null,"source":"def fishy_active\n  @fishy_active\nend","language":"ruby","dynamic":null,"tags":{}},"FishSampler::Fish":{"!":"class","superclass":"Object","path":"FishSampler::Fish","name":"Fish","namespace":"FishSampler","comment":"A fish is any aquatic vertebrate animal that is typically ectothermic (or cold-blooded),\ncovered with scales, and equipped with two sets of paired fins and several unpaired fins.\nFish are abundant in the sea and in fresh water, with species being known from mountain\nstreams (e.g., char and gudgeon) as well as in the deepest depths of the ocean\n(e.g., gulpers and anglerfish).","format":"rdoc","constants":[],"includes":[],"extensions":[],"modules":[],"classes":[],"methods":["FishSampler::Fish#qualities","FishSampler::Fish#qualities=","FishSampler::Fish#initialize","FishSampler::Fish#initialize_qualities","FishSampler::Fish#properties"],"accessors":["FishSampler::Fish#qualities"],"files":["/lib/fish.rb"],"tags":{}},"FishSampler::Fish#qualities":{"!":"method","declarations":["instance","public"],"path":"FishSampler::Fish#qualities","name":"qualities","namespace":"FishSampler::Fish","comment":"List of various fish qualities.","format":"rdoc","aliases":["FishSampler::Fish#properties"],"singleton":null,"interfaces":[{"signature":"qualities","arguments":[]}],"returns":[],"file":"/lib/fish.rb","line":null,"source":"def qualities\n  @qualities\nend","language":"ruby","dynamic":null,"tags":{}},"FishSampler::Fish#qualities=":{"!":"method","declarations":["instance","public"],"path":"FishSampler::Fish#qualities=","name":"qualities=","namespace":"FishSampler::Fish","comment":"List of various fish qualities.","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"qualities=(value)","arguments":[{"name":"value"}]}],"returns":[],"file":"/lib/fish.rb","line":null,"source":"def qualities=(value)\n  @qualities = value\nend","language":"ruby","dynamic":null,"tags":{}},"FishSampler::Fish#initialize":{"!":"method","declarations":["instance","public"],"path":"FishSampler::Fish#initialize","name":"initialize","namespace":"FishSampler::Fish","comment":"New Fish","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"initialize()","arguments":[]}],"returns":[{"type":"Fish","comment":"a new instance of Fish"}],"file":"/lib/fish.rb","line":null,"source":"def initialize\n  @qualities = DEFALULT_QUALITIES\n  initialize_qualities\nend","language":"ruby","dynamic":null,"tags":{}},"FishSampler::Fish#initialize_qualities":{"!":"method","declarations":["instance","public"],"path":"FishSampler::Fish#initialize_qualities","name":"initialize_qualities","namespace":"FishSampler::Fish","comment":"Override to add qualties.","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"initialize_qualities()","arguments":[]}],"returns":[],"file":"/lib/fish.rb","line":null,"source":"def initialize_qualities\nend","language":"ruby","dynamic":null,"tags":{}},"FishSampler::Fish#properties":{"!":"method","declarations":["instance","public"],"path":"FishSampler::Fish#properties","name":"properties","namespace":"FishSampler::Fish","comment":"List of various fish qualities.\nAnother term for qualities.","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"qualities","arguments":[]}],"returns":[],"file":"/lib/fish.rb","line":null,"source":"def qualities\n  @qualities\nend","language":"ruby","dynamic":null,"tags":{}},"FishSampler::RedFish":{"!":"class","superclass":"Object","path":"FishSampler::RedFish","name":"RedFish","namespace":"FishSampler","comment":"= Brite Red Fish\n\nRed fish are quite pretty a fairly common.","format":"rdoc","constants":[],"includes":[],"extensions":[],"modules":[],"classes":[],"methods":["FishSampler::RedFish#qualities","FishSampler::RedFish#qualities=","FishSampler::RedFish#initialize_qualities"],"accessors":["FishSampler::RedFish#qualities"],"files":["/lib/fish.rb"],"tags":{}},"FishSampler::RedFish#qualities":{"!":"method","declarations":["instance","public"],"path":"FishSampler::RedFish#qualities","name":"qualities","namespace":"FishSampler::RedFish","comment":"List of various fish qualities.","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"qualities","arguments":[]}],"returns":[],"file":"/lib/fish.rb","line":null,"source":"def qualities\n  @qualities\nend","language":"ruby","dynamic":null,"tags":{}},"FishSampler::RedFish#qualities=":{"!":"method","declarations":["instance","public"],"path":"FishSampler::RedFish#qualities=","name":"qualities=","namespace":"FishSampler::RedFish","comment":"List of various fish qualities.","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"qualities=(value)","arguments":[{"name":"value"}]}],"returns":[],"file":"/lib/fish.rb","line":null,"source":"def qualities=(value)\n  @qualities = value\nend","language":"ruby","dynamic":null,"tags":{}},"FishSampler::RedFish#initialize_qualities":{"!":"method","declarations":["instance","public"],"path":"FishSampler::RedFish#initialize_qualities","name":"initialize_qualities","namespace":"FishSampler::RedFish","comment":"New Red Fish","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"initialize_qualities()","arguments":[]}],"returns":[],"file":"/lib/fish.rb","line":null,"source":"def initialize_qualities\n  super\n  @qualties << :red\nend","language":"ruby","dynamic":null,"tags":{}},"FishSampler::BlueFish":{"!":"class","superclass":"FishSampler::Fish","path":"FishSampler::BlueFish","name":"BlueFish","namespace":"FishSampler","comment":"= Blue Fish\n\nDespite their name most Bluefish aren't very blue.","format":"rdoc","constants":[],"includes":[],"extensions":[],"modules":[],"classes":[],"methods":["FishSampler::BlueFish#qualities","FishSampler::BlueFish#qualities=","FishSampler::BlueFish#initialize_qualities"],"accessors":["FishSampler::BlueFish#qualities"],"files":["/lib/fish.rb"],"tags":{}},"FishSampler::BlueFish#qualities":{"!":"method","declarations":["instance","public"],"path":"FishSampler::BlueFish#qualities","name":"qualities","namespace":"FishSampler::BlueFish","comment":"List of various fish qualities.","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"qualities","arguments":[]}],"returns":[],"file":"/lib/fish.rb","line":null,"source":"def qualities\n  @qualities\nend","language":"ruby","dynamic":null,"tags":{}},"FishSampler::BlueFish#qualities=":{"!":"method","declarations":["instance","public"],"path":"FishSampler::BlueFish#qualities=","name":"qualities=","namespace":"FishSampler::BlueFish","comment":"List of various fish qualities.","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"qualities=(value)","arguments":[{"name":"value"}]}],"returns":[],"file":"/lib/fish.rb","line":null,"source":"def qualities=(value)\n  @qualities = value\nend","language":"ruby","dynamic":null,"tags":{}},"FishSampler::BlueFish#initialize_qualities":{"!":"method","declarations":["instance","public"],"path":"FishSampler::BlueFish#initialize_qualities","name":"initialize_qualities","namespace":"FishSampler::BlueFish","comment":"New Blue Fish","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"initialize_qualities()","arguments":[]}],"returns":[],"file":"/lib/fish.rb","line":null,"source":"def initialize_qualities\n  super\n  @qualties << :blue\nend","language":"ruby","dynamic":null,"tags":{}},"FishSampler::OldFish":{"!":"class","superclass":"FishSampler::Fish","path":"FishSampler::OldFish","name":"OldFish","namespace":"FishSampler","comment":"Fish get old too.","format":"rdoc","constants":[],"includes":[],"extensions":[],"modules":[],"classes":[],"methods":["FishSampler::OldFish#qualities","FishSampler::OldFish#qualities=","FishSampler::OldFish#initialize_qualities"],"accessors":["FishSampler::OldFish#qualities"],"files":["/lib/fish.rb"],"tags":{}},"FishSampler::OldFish#qualities":{"!":"method","declarations":["instance","public"],"path":"FishSampler::OldFish#qualities","name":"qualities","namespace":"FishSampler::OldFish","comment":"List of various fish qualities.","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"qualities","arguments":[]}],"returns":[],"file":"/lib/fish.rb","line":null,"source":"def qualities\n  @qualities\nend","language":"ruby","dynamic":null,"tags":{}},"FishSampler::OldFish#qualities=":{"!":"method","declarations":["instance","public"],"path":"FishSampler::OldFish#qualities=","name":"qualities=","namespace":"FishSampler::OldFish","comment":"List of various fish qualities.","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"qualities=(value)","arguments":[{"name":"value"}]}],"returns":[],"file":"/lib/fish.rb","line":null,"source":"def qualities=(value)\n  @qualities = value\nend","language":"ruby","dynamic":null,"tags":{}},"FishSampler::OldFish#initialize_qualities":{"!":"method","declarations":["instance","public"],"path":"FishSampler::OldFish#initialize_qualities","name":"initialize_qualities","namespace":"FishSampler::OldFish","comment":"New Old Fish","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"initialize_qualities()","arguments":[]}],"returns":[],"file":"/lib/fish.rb","line":null,"source":"def initialize_qualities\n  super\n  @qualties << :old\nend","language":"ruby","dynamic":null,"tags":{}},"FishSampler::NewFish":{"!":"class","superclass":"FishSampler::Fish","path":"FishSampler::NewFish","name":"NewFish","namespace":"FishSampler","comment":"It's hard to tell new fish form small fish.","format":"rdoc","constants":[],"includes":[],"extensions":[],"modules":[],"classes":[],"methods":["FishSampler::NewFish#qualities","FishSampler::NewFish#qualities=","FishSampler::NewFish#initialize_qualities"],"accessors":["FishSampler::NewFish#qualities"],"files":["/lib/fish.rb"],"tags":{}},"FishSampler::NewFish#qualities":{"!":"method","declarations":["instance","public"],"path":"FishSampler::NewFish#qualities","name":"qualities","namespace":"FishSampler::NewFish","comment":"List of various fish qualities.","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"qualities","arguments":[]}],"returns":[],"file":"/lib/fish.rb","line":null,"source":"def qualities\n  @qualities\nend","language":"ruby","dynamic":null,"tags":{}},"FishSampler::NewFish#qualities=":{"!":"method","declarations":["instance","public"],"path":"FishSampler::NewFish#qualities=","name":"qualities=","namespace":"FishSampler::NewFish","comment":"List of various fish qualities.","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"qualities=(value)","arguments":[{"name":"value"}]}],"returns":[],"file":"/lib/fish.rb","line":null,"source":"def qualities=(value)\n  @qualities = value\nend","language":"ruby","dynamic":null,"tags":{}},"FishSampler::NewFish#initialize_qualities":{"!":"method","declarations":["instance","public"],"path":"FishSampler::NewFish#initialize_qualities","name":"initialize_qualities","namespace":"FishSampler::NewFish","comment":"New NewFish","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"initialize_qualities()","arguments":[]}],"returns":[],"file":"/lib/fish.rb","line":null,"source":"def initialize_qualities\n  super\n  @qualties << :new\nend","language":"ruby","dynamic":null,"tags":{}},"FishSampler::ManEater":{"!":"module","path":"FishSampler::ManEater","name":"ManEater","namespace":"FishSampler","comment":"Some fish will eat a man!","format":"rdoc","constants":[],"includes":[],"extensions":[],"modules":[],"classes":[],"methods":["FishSampler::ManEater#initialize_qualities"],"accessors":[],"files":["/lib/fish.rb"],"tags":{}},"FishSampler::ManEater#initialize_qualities":{"!":"method","declarations":["instance","public"],"path":"FishSampler::ManEater#initialize_qualities","name":"initialize_qualities","namespace":"FishSampler::ManEater","comment":"Man Eaters are scary!","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"initialize_qualities()","arguments":[]}],"returns":[],"file":"/lib/fish.rb","line":null,"source":"def initialize_qualities\n  super\n  @qualties << :scary\nend","language":"ruby","dynamic":null,"tags":{}},"FishSampler::Shark":{"!":"class","superclass":"FishSampler::Fish","path":"FishSampler::Shark","name":"Shark","namespace":"FishSampler","comment":"= Shark (Yikes!)\n\nSharks (superorder Selachimorpha) are a type of fish with a full cartilaginous skeleton\nand a highly streamlined body. The earliest known sharks date from more than 420 million\nyears ago, before the time of the dinosaurs.","format":"rdoc","constants":[],"includes":["FishSampler::ManEater"],"extensions":[],"modules":[],"classes":[],"methods":["FishSampler::Shark#initialize_qualities","FishSampler::Shark#secret"],"accessors":[],"files":["/lib/fish.rb"],"tags":{}},"FishSampler::Shark#initialize_qualities":{"!":"method","declarations":["instance","public"],"path":"FishSampler::Shark#initialize_qualities","name":"initialize_qualities","namespace":"FishSampler::Shark","comment":"New Shark","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"initialize_qualities()","arguments":[]}],"returns":[],"file":"/lib/fish.rb","line":null,"source":"def initialize_qualities\n  super\n  @qualties << :big\nend","language":"ruby","dynamic":null,"tags":{}},"FishSampler::Shark#secret":{"!":"method","declarations":["instance","private"],"path":"FishSampler::Shark#secret","name":"secret","namespace":"FishSampler::Shark","comment":"","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"secret()","arguments":[]}],"returns":[],"file":"/lib/fish.rb","line":null,"source":"def secret\n  puts \"Shh... shark secrets!\"\nend","language":"ruby","dynamic":null,"tags":{}},"Numeric":{"!":"class","superclass":"Object","path":"Numeric","name":"Numeric","namespace":"","comment":"","format":"rdoc","constants":[],"includes":["Numeric::Multipliers"],"extensions":[],"modules":["Numeric::Multipliers"],"classes":[],"methods":[],"accessors":[],"files":["/lib/multipliers.rb"],"tags":{}},"Numeric::Multipliers":{"!":"module","path":"Numeric::Multipliers","name":"Multipliers","namespace":"Numeric","comment":"= Multipliers\n\nAdds methods to Numeric to make working with\nmagnitudes (kilo, mega, giga, milli, micro, etc.)\n\n  1.kilo               #=> 1000\n  1.milli              #=> 0.001\n  1.kibi               #=> 1024\n\nTo display a value in a certain denomination, simply\nperform the inverse operation by placing the\nmultiplier called on unit (1) in the denominator.\n\n  1000 / 1.kilo        #=> 1\n  1024 / 1.kibi        #=> 1","format":"rdoc","constants":[],"includes":[],"extensions":[],"modules":[],"classes":[],"methods":["Numeric::Multipliers#deka","Numeric::Multipliers#hecto","Numeric::Multipliers#kilo","Numeric::Multipliers#mega","Numeric::Multipliers#giga","Numeric::Multipliers#tera","Numeric::Multipliers#peta","Numeric::Multipliers#exa","Numeric::Multipliers#deci","Numeric::Multipliers#centi","Numeric::Multipliers#milli","Numeric::Multipliers#micro","Numeric::Multipliers#nano","Numeric::Multipliers#pico","Numeric::Multipliers#femto","Numeric::Multipliers#atto","Numeric::Multipliers#kibi","Numeric::Multipliers#mebi","Numeric::Multipliers#gibi","Numeric::Multipliers#tebi","Numeric::Multipliers#pebi","Numeric::Multipliers#exbi"],"accessors":[],"files":["/lib/multipliers.rb"],"tags":{}},"Numeric::Multipliers#deka":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#deka","name":"deka","namespace":"Numeric::Multipliers","comment":"SI Multipliers","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"deka()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":null,"source":"def deka  ; self * 10 ; end","language":"ruby","dynamic":null,"tags":{}},"Numeric::Multipliers#hecto":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#hecto","name":"hecto","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"hecto()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":null,"source":"def hecto ; self * 100 ; end","language":"ruby","dynamic":null,"tags":{}},"Numeric::Multipliers#kilo":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#kilo","name":"kilo","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"kilo()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":null,"source":"def kilo  ; self * 1000 ; end","language":"ruby","dynamic":null,"tags":{}},"Numeric::Multipliers#mega":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#mega","name":"mega","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"mega()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":null,"source":"def mega  ; self * 1000000 ; end","language":"ruby","dynamic":null,"tags":{}},"Numeric::Multipliers#giga":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#giga","name":"giga","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"giga()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":null,"source":"def giga  ; self * 1000000000 ; end","language":"ruby","dynamic":null,"tags":{}},"Numeric::Multipliers#tera":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#tera","name":"tera","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"tera()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":null,"source":"def tera  ; self * 1000000000000 ; end","language":"ruby","dynamic":null,"tags":{}},"Numeric::Multipliers#peta":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#peta","name":"peta","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"peta()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":null,"source":"def peta  ; self * 1000000000000000 ; end","language":"ruby","dynamic":null,"tags":{}},"Numeric::Multipliers#exa":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#exa","name":"exa","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"exa()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":null,"source":"def exa   ; self * 1000000000000000000 ; end","language":"ruby","dynamic":null,"tags":{}},"Numeric::Multipliers#deci":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#deci","name":"deci","namespace":"Numeric::Multipliers","comment":"SI Fractional","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"deci()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":null,"source":"def deci  ; self.to_f / 10 ; end","language":"ruby","dynamic":null,"tags":{}},"Numeric::Multipliers#centi":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#centi","name":"centi","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"centi()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":null,"source":"def centi ; self.to_f / 100 ; end","language":"ruby","dynamic":null,"tags":{}},"Numeric::Multipliers#milli":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#milli","name":"milli","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"milli()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":null,"source":"def milli ; self.to_f / 1000 ; end","language":"ruby","dynamic":null,"tags":{}},"Numeric::Multipliers#micro":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#micro","name":"micro","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"micro()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":null,"source":"def micro ; self.to_f / 1000000 ; end","language":"ruby","dynamic":null,"tags":{}},"Numeric::Multipliers#nano":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#nano","name":"nano","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"nano()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":null,"source":"def nano  ; self.to_f / 1000000000 ; end","language":"ruby","dynamic":null,"tags":{}},"Numeric::Multipliers#pico":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#pico","name":"pico","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"pico()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":null,"source":"def pico  ; self.to_f / 1000000000000 ; end","language":"ruby","dynamic":null,"tags":{}},"Numeric::Multipliers#femto":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#femto","name":"femto","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"femto()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":null,"source":"def femto ; self.to_f / 1000000000000000 ; end","language":"ruby","dynamic":null,"tags":{}},"Numeric::Multipliers#atto":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#atto","name":"atto","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"atto()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":null,"source":"def atto  ; self.to_f / 1000000000000000000 ; end","language":"ruby","dynamic":null,"tags":{}},"Numeric::Multipliers#kibi":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#kibi","name":"kibi","namespace":"Numeric::Multipliers","comment":"SI Binary","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"kibi()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":null,"source":"def kibi ; self * 1024 ; end","language":"ruby","dynamic":null,"tags":{}},"Numeric::Multipliers#mebi":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#mebi","name":"mebi","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"mebi()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":null,"source":"def mebi ; self * 1024**2 ; end","language":"ruby","dynamic":null,"tags":{}},"Numeric::Multipliers#gibi":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#gibi","name":"gibi","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"gibi()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":null,"source":"def gibi ; self * 1024**3 ; end","language":"ruby","dynamic":null,"tags":{}},"Numeric::Multipliers#tebi":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#tebi","name":"tebi","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"tebi()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":null,"source":"def tebi ; self * 1024**4 ; end","language":"ruby","dynamic":null,"tags":{}},"Numeric::Multipliers#pebi":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#pebi","name":"pebi","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"pebi()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":null,"source":"def pebi ; self * 1024**5 ; end","language":"ruby","dynamic":null,"tags":{}},"Numeric::Multipliers#exbi":{"!":"method","declarations":["instance","public"],"path":"Numeric::Multipliers#exbi","name":"exbi","namespace":"Numeric::Multipliers","comment":"","format":"rdoc","aliases":[],"singleton":null,"interfaces":[{"signature":"exbi()","arguments":[]}],"returns":[],"file":"/lib/multipliers.rb","line":null,"source":"def exbi ; self * 1024**6 ; end","language":"ruby","dynamic":null,"tags":{}},"/README":{"!":"document","path":"README","name":"README","mtime":null,"text":"= RDocodile's Fish Sampler\n\nhttp://rdocodile.github.com\n\n\n== Description\n\nRDocodile's Fish Sampler is as a mock Ruby project used to demostrate\nRDocodile's many RDoc formats. RDocodile is the RDoc Beautification project.\nIt houses a number of format repositories and an reusable RDoc component\nsystem.\n\n\n== Features\n\n* Provides many practical, yet aesthetically pleasing templates.\n* Provides a component system to make RDOc formats easier to build and extended.\n\n\n== Lorem Ipsum\n\nDolor sit amet, consectetur adipiscing elit. Sed tristique metus id\nnisl suscipit et pulvinar lectus pulvinar. Mauris eu leo sit amet magna rutrum\npharetra. Aliquam eu est eu erat tempor dapibus et sit amet urna. Nunc vulputate\nurna ipsum. In venenatis gravida est, ullamcorper commodo lorem laoreet eget.\nAliquam non ipsum ante, a mollis quam. Cras in risus id dolor lacinia ornare.\n\nPellentesque habitant morbi tristique senectus et netus et malesuada fames ac\nturpis egestas. Etiam rutrum nulla a mauris condimentum non egestas felis\ntincidunt. Nulla mi nisi, ullamcorper placerat gravida non, aliquet vel felis.\nVivamus eu odio vel elit bibendum congue.\n\n\n== Installation\n\nInstalling via RubyGems is per the usual:\n\n  $ sudo gem install yummy-fish-sampler\n\n\n== Copyright\n\nRdocodile's Fish Sampler\n\nCopyright (c) 2009 Thomas Sawyer, CC-A License\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n","format":"text/plain"},"/lib/fish.rb":{"!":"script","path":"lib/fish.rb","name":"fish.rb","mtime":null,"uri":"https://github.com/rubyworks/shomen/blob/master/work/sample/lib/fish.rb","language":"text/x-ruby"},"/lib/multipliers.rb":{"!":"script","path":"lib/multipliers.rb","name":"multipliers.rb","mtime":null,"uri":"https://github.com/rubyworks/shomen/blob/master/work/sample/lib/multipliers.rb","language":"text/x-ruby"}}
